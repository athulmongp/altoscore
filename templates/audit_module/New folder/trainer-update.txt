

def Audit_empdaily_reportpdf(request,audit_rep_id):
    date = datetime.now()  
    if request.method =="POST":
        
        formdate=request.POST.get('emp_form')
        todate=request.POST.get('emp_to')
        user= user_registration.objects.get(id=audit_rep_id)
       
        
        task = project_taskassign.objects.filter(developer_id=audit_rep_id,startdate__gte=formdate, enddate__lte=todate).order_by('startdate') 
        for i in task:
            print(i.id)

        tester_data= TSproject_Task_verify.objects.filter(ts_project_task__in=task)

       
       
        lev = leave.objects.filter(user_id=audit_rep_id,from_date__gte=formdate,from_date__lte=todate)
        event1 = Event.objects.filter(start_time__range=(formdate,todate))
       
        if user.designation.designation == 'project manager':
            proj = project.objects.filter(projectmanager_id=audit_rep_id,startdate__gte=formdate,startdate__lte=todate)
            ptask = project_taskassign.objects.filter(project__in=proj,startdate__gte=formdate, enddate__lte=todate).order_by('startdate')
          
        else:
            ptask=None
            proj=None
     
       
        tlev=0
        for i in lev:
            tlev=tlev + int(i.days)




    print('tester:',tester_data)

    template_path = 'audit_module/audit_emp_dailyreport_pdf.html'
    context = {
    
    
    'task':task,
    'tester_data':tester_data,
    'ptask':ptask,
    'proj':proj,
    
    'date':date,
    
    'lev':lev,
    
    'tlev':tlev,
    'event1':event1,
    'user':user,
    'formdate':formdate,
    'todate':todate,
   
    'path':settings.NEWPATH,
    }
        
    # Create a Django response object, and specify content_type as pdf
    response = HttpResponse(content_type='application/pdf')
    #response['Content-Disposition'] = 'attachment; filename="certificate.pdf"'
    response['Content-Disposition'] = 'filename="Project-DailyTask-Report.pdf"'
     # find the template and render it.

    template = get_template(template_path)
    html = template.render(context)

    # create a pdf
    pisa_status = pisa.CreatePDF(
    html, dest=response)

    # if error then show some funy view
    if pisa_status.err:
        return HttpResponse('We had some errors <pre>' + html + '</pre>')
    return response





def audit_trainee_reportPDF(request,PDF_traineer_id):
    
  
    date = datetime.now()    # Getting the current date

    if request.method =="POST": # reading all the data 
        p1=request.POST.get('trainee_project')
        p2=request.POST.get('tainee_task')
        p3=request.POST.get('trainee_topics')
        p4=request.POST.get('trainee_leave')
        p5=request.POST.get('trainee_feedbak')
        p6=request.POST.get('trainee_probation')
        formdate=request.POST.get('sdate')
        todate=request.POST.get('edate')
 

    trainee = user_registration.objects.get(id=PDF_traineer_id)

    if p1 == '1':

        project_task = trainer_task.objects.filter(user_id=trainee.id,task_type=1)
    else:
        project_task=None
    
    if p2 == '1':
        ttasks = trainer_task.objects.filter(user_id=trainee.id,task_type=0,startdate__gte=formdate,startdate__lte=todate)

    else:
        ttasks=None   
    
    if p3 == '1':
        ttask = trainer_task.objects.filter(user_id=trainee.id,task_type=0)
        team_names = ttask.values_list('team_name', flat=True)
        ttopic = topic.objects.filter(team__in=team_names,startdate__gte=formdate,startdate__lte=todate)
    else:
        ttopic=None   
   
    if p4 == '1':
        leave_data = leave.objects.filter(user=trainee,from_date__gte=formdate,from_date__lte=todate)

    else:
        leave_data=None   
   
    if p5 == '1':
        
        feedback_data = Feedbacks.objects.filter(fb_from=trainee,fb_date__gte=formdate,fb_date__lte=todate)
    else:
        feedback_data=None  

    if p6 == '1':
         t_prob=probation.objects.filter(user_id=trainee) 
    else:
        t_prob=None  
   
    tester_data = trainer_task_test.objects.all()
    
    content={'trainee':trainee,'date':date,'ttopic':ttopic,'ttasks':ttasks,'project_task':project_task,
             'tester_data':tester_data,'leave_data':leave_data,'feedback_data':feedback_data,
             'formdate':formdate,'todate':todate,'t_prob':t_prob}
    
    template_path = 'audit_module/audit_trainee_report_pdf.html'

    # Create a Django response object, and specify content_type as pdf
    response = HttpResponse(content_type='application/pdf')
    #response['Content-Disposition'] = 'attachment; filename="certificate.pdf"'
    response['Content-Disposition'] = 'filename="Trainee-Report.pdf"'
     # find the template and render it.

    template = get_template(template_path)
    html = template.render(content)

    # create a pdf
    pisa_status = pisa.CreatePDF(
    html, dest=response)

    # if error then show some funy view
    if pisa_status.err:
        return HttpResponse('We had some errors <pre>' + html + '</pre>')
    return response




def Audit_emp_reportpdf(request,audit_rep_id):
    date = datetime.now()  
    if request.method =="POST":
        p1=request.POST.get('emp_training')
        p2=request.POST.get('emp_proj')
        p3=request.POST.get('emp_proj_corr')
        p4=request.POST.get('emp_proj_up')
        p5=request.POST.get('emp_salary')
        p6=request.POST.get('emp_leatd')
        p7=request.POST.get('emp_issue')
        formdate=request.POST.get('emp_form')
        todate=request.POST.get('emp_to')
        user= user_registration.objects.get(id=audit_rep_id)
        pros = project.objects.all()
        devp = project_taskassign.objects.filter(developer_id=audit_rep_id,startdate__gte=formdate, enddate__lte=todate).values('project_id').distinct()
        task = project_taskassign.objects.filter(developer_id=audit_rep_id,startdate__gte=formdate, enddate__lte=todate)
        corre = ProjectCorrectionUpdation.objects.filter(pdev_name=user.fullname,project_date__gte=formdate,project_date__lte=todate)
        tm = previousTeam.objects.filter(user_id=audit_rep_id,tr_start_date__gte=formdate,tr_start_date__lte=todate)
        tm1 = previousTeam.objects.filter(user_id=audit_rep_id,tr_start_date__gte=formdate,tr_start_date__lte=todate).values('teamname').distinct()
        pr = probation.objects.filter(user_id=audit_rep_id)
        tsk = trainer_task.objects.filter(user_id=audit_rep_id,startdate__gte=formdate ,startdate__lte=todate)
        top = topic.objects.filter(startdate__gte=formdate,startdate__lte=todate,team_id__in=tm1.values_list('teamname'))
        att = attendance.objects.filter(user_id=audit_rep_id,date__gte=formdate,date__lte=todate,attendance_status='1')
        lev = leave.objects.filter(user_id=audit_rep_id,from_date__gte=formdate,from_date__lte=todate)
        act = Action_Taken.objects.filter(atemp_id=audit_rep_id,at_date__gte=formdate,at_date__lte=todate)
        sal = acntspayslip.objects.filter(user_id_id=audit_rep_id,fromdate__gte=formdate,fromdate__lte=todate)
        proj = project.objects.filter(projectmanager_id=audit_rep_id,startdate__gte=formdate,startdate__lte=todate)
        
        tester_data = TSproject_Task_verify.objects.filter(ts_project_task__in=task)


        tlev=0
        for i in lev:
            tlev=tlev + int(i.days)




    template_path = 'audit_module/audit_emp_report_pdf.html'
    context = {
    'p1':p1,
    'p2':p2,
    'pros':pros,
    'devp':devp,
    'task':task,
    'tester_data':tester_data,
    'p3':p3,
    'p4':p4,
    'p5':p5,
    'p6':p6,
    'p7':p7,
    'date':date,
    'corre':corre,
    'tm':tm,
    'pr':pr,
    'tsk':tsk,
    'top':top,
    'lev':lev,
    'att':att,
    'tlev':tlev,
    'act':act,
    'sal':sal,
    'user':user,
    'formdate':formdate,
    'todate':todate,
    'proj':proj,
    'path':settings.NEWPATH,
    }
        
    # Create a Django response object, and specify content_type as pdf
    response = HttpResponse(content_type='application/pdf')
    #response['Content-Disposition'] = 'attachment; filename="certificate.pdf"'
    response['Content-Disposition'] = 'filename="Project-Document.pdf"'
     # find the template and render it.

    template = get_template(template_path)
    html = template.render(context)

    # create a pdf
    pisa_status = pisa.CreatePDF(
    html, dest=response)

    # if error then show some funy view
    if pisa_status.err:
        return HttpResponse('We had some errors <pre>' + html + '</pre>')
    return response
        
    