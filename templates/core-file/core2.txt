

updation view

def Audit_emp_list(request,audit_depart_id,audit_des_id):
    if 'aud_id' in request.session:
        if request.session.has_key('aud_id'):
            Aud_id = request.session['aud_id']
        else:
            return redirect('/')
        Aud = user_registration.objects.filter(id=Aud_id)
        mem = department.objects.get(id=audit_depart_id)
        mem1 = designation.objects.get(pk=audit_des_id)

        if mem1.designation == 'tester':

            use=user_registration.objects.filter(department_id=mem.id,designation=mem1, status="active")
            context = {'mem':mem,'use':use,'Aud' : Aud}

            return render(request, 'audit_module/audit_tester.html',context)

        use=user_registration.objects.filter(department_id=mem.id,designation=mem1, status="active")
        context = {'mem':mem,'use':use,'Aud' : Aud,}
        return render(request, 'audit_module/audit_depart_designations_emp.html',context)
    else:
        return redirect('/')

====== new url ===========

 path('Audit_empdaily_reportpdf/<int:audit_rep_id>', views.Audit_empdaily_reportpdf, name='Audit_empdaily_reportpdf'),

============= new view ============

def Audit_empdaily_reportpdf(request,audit_rep_id):
    date = datetime.now()  
    if request.method =="POST":
        
        formdate=request.POST.get('emp_form')
        todate=request.POST.get('emp_to')
        user= user_registration.objects.get(id=audit_rep_id)
       
        
        task = project_taskassign.objects.filter(developer_id=audit_rep_id,startdate__gte=formdate, enddate__lte=todate)
       
        #tsk = trainer_task.objects.filter(user_id=audit_rep_id,startdate__gte=formdate ,startdate__lte=todate)
       
       
        lev = leave.objects.filter(user_id=audit_rep_id,from_date__gte=formdate,from_date__lte=todate)
        event1 = Event.objects.filter(start_time__range=(formdate,todate))
       
        if user.designation.designation == 'project manager':
            proj = project.objects.filter(projectmanager_id=audit_rep_id,startdate__gte=formdate,startdate__lte=todate)
            ptask = project_taskassign.objects.filter(project__in=proj,startdate__gte=formdate, enddate__lte=todate).order_by('startdate')
          
        else:
            proj=None
     
       
        tlev=0
        for i in lev:
            tlev=tlev + int(i.days)






    template_path = 'audit_module/audit_emp_dailyreport_pdf.html'
    context = {
    
    
    'task':task,
    'ptask':ptask,
    
    'date':date,
    
    'lev':lev,
    
    'tlev':tlev,
    'event1':event1,
    'user':user,
    'formdate':formdate,
    'todate':todate,
   
    'path':settings.NEWPATH,
    }
        
    # Create a Django response object, and specify content_type as pdf
    response = HttpResponse(content_type='application/pdf')
    #response['Content-Disposition'] = 'attachment; filename="certificate.pdf"'
    response['Content-Disposition'] = 'filename="Project-Document.pdf"'
     # find the template and render it.

    template = get_template(template_path)
    html = template.render(context)

    # create a pdf
    pisa_status = pisa.CreatePDF(
    html, dest=response)

    # if error then show some funy view
    if pisa_status.err:
        return HttpResponse('We had some errors <pre>' + html + '</pre>')
    return response



